Python编码规范(PEP8)及奇技淫巧(不断更新)
http://blog.csdn.net/mrlevo520/article/details/69155636

#### Week 4 ####
计算器code from 哈士奇说喵：
http://blog.csdn.net/mrlevo520/article/details/51812096
tkinter is de-facto python GUI
'Tkinter' as in python 2.7
'tkinter' as in python 3.6

Grid据说更好用

#### Code ####

#-------------------二输入规则计算器--------------------
#Author：哈士奇说喵(第一次署名有点怕)
# -*- coding: utf-8 -*-
from Tkinter import *
import difflib
#主框架部分
root = Tk()
root.title('乞丐版规则器0.0')
root.geometry()
Label_root=Label(root,text='规则运算(根框架)',font=('宋体',15))

#-----------------------定义规则------------------------

def Plus(a,b):
    return round(a+b, 2)

def Sub(a,b):
    return round(a-b,2)

def Mult(a,b):
    return round(a*b, 2)

def Div(a,b):
    return round(a/b, 2)

def P_str(a,b):
    return a+b

def Rep(a,b):
    return difflib.SequenceMatcher(None,a,b).ratio()
    #difflib可以看看其中的定义，计算匹配率的

#还可以继续增加规则函数，只要是两输入的参数都可以
#----------------------触发函数-----------------------

def Answ():#规则函数

    if lb.get(lb.curselection()).encode('utf-8') == '加':
        Ans.insert(END,'规则:+ ->'+str(Plus(float(var_first.get()),float(var_second.get()))))
    if lb.get(lb.curselection()).encode('utf-8')=='减':
        Ans.insert(END,'规则:- ->'+str(Sub(float(var_first.get()),float(var_second.get()))))
    if lb.get(lb.curselection()).encode('utf-8')=='乘':
        Ans.insert(END,'规则:x ->'+str(Mult(float(var_first.get()),float(var_second.get()))))
    if lb.get(lb.curselection()).encode('utf-8')=='除':
        Ans.insert(END,'规则:/ ->'+str(Div(float(var_first.get()),float(var_second.get()))))
    if lb.get(lb.curselection()).encode('utf-8')=='字符串连接':
        Ans.insert(END,'规则：字符串连接 ->' +P_str(var_first.get(),var_second.get()).encode('utf-8'))
    if lb.get(lb.curselection()).encode('utf-8')=='字符串相似度':
        Ans.insert(END,'规则:字符串相似度 ->'+str(Rep(var_first.get(),var_second.get())))

    #添加规则后定义规则函数

def Clea():#清空函数
    input_num_first.delete(0,END)#这里entry的delect用0
    input_num_second.delete(0,END)
    Ans.delete(0,END)#text中的用0.0


#----------------------输入选择框架--------------------
frame_input = Frame(root)
Label_input=Label(frame_input, text='(输入和选择框架)', font=('',15))
var_first = StringVar()
var_second = StringVar()
input_num_first = Entry(frame_input, textvariable=var_first)
input_num_second = Entry(frame_input, textvariable=var_second)

#---------------------选择运算规则---------------------
#还可以添加其他规则

lb = Listbox(frame_input,height=4)
list_item=['加', '减', '乘', '除','字符串连接','字符串相似度']
for i in list_item:
    lb.insert(END,i)

#---------------------计算结果框架---------------------
frame_output = Frame(root)
Label_output=Label(frame_output, text='(计算结果框架)', font=('',15))
Ans = Listbox(frame_output, height=5,width=30)#text也可以，Listbox好处在于换行


#-----------------------Button-----------------------

calc = Button(frame_output,text='计算', command=Answ)
cle = Button(frame_output,text='清除', command=Clea)


#---------------------滑动Scrollbar-------------------
scr1 = Scrollbar(frame_input)
lb.configure(yscrollcommand = scr1.set)
scr1['command']=lb.yview

scr2 = Scrollbar(frame_output)
Ans.configure(yscrollcommand = scr2.set)
scr2['command']=Ans.yview


#-------------------------布局------------------------
#布局写在一块容易排版，可能我low了吧
Label_root.pack(side=TOP)
frame_input.pack(side=TOP)
Label_input.pack(side=LEFT)

input_num_first.pack(side=LEFT)
lb.pack(side=LEFT)
scr1.pack(side=LEFT,fill=Y)
input_num_second.pack(side=RIGHT)

frame_output.pack(side=TOP)
Label_output.pack(side=LEFT)
calc.pack(side=LEFT)
cle.pack(side=LEFT)
Ans.pack(side=LEFT)
scr2.pack(side=LEFT,fill=Y)

#-------------------root.mainloop()------------------

root.mainloop()



#### Week 5 - Translation GUI ####
Instruction: http://blog.csdn.net/MrLevo520/article/details/51674188

# How to check my header:
webpage (chrome) > F12 (inspect elements) > Network > Click one of requests > Request URL & Request METHOD & Request [Headers]
My header:
Request Method:GET
Content-Encoding:gzip
Referer:http://blog.csdn.net/horseinch/article/details/51720630
User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36

# Encoding/Decoding/Codec:
Python 3.x: byte/str (ENG) - http://eli.thegreenplace.net/2012/01/30/the-bytesstr-dichotomy-in-python-3
(CHN) - http://www.ituring.com.cn/article/1116
Encoding - http://www.ituring.com.cn/article/1115





Notes on Python 3.6 vs 2.7:

1. urllib package diff.
Python3's urllib package vs Python2.x's urllib, urllib2, requests packages: http://blog.csdn.net/permike/article/details/52437492
urllib.request documentation: https://docs.python.org/3.6/library/urllib.request.html#module-urllib.request

changes in code
import urllib, urllib2 --> import urllib.request
urllib2.Request --> urllib.request.Request
urllib2.urlopen --> urllib.request.urlopen


2. name 'raw_input' is not defined
input() replaced raw_input() in Python 3.x

3. Python 3.x doesn't allow concat str to byte


#### Code ####
# -*- coding: utf-8 -*-

# in python 2.x
#import urllib2
#import urllib  # python2.7才需要两个urllib
# in python 3
import urllib.request

import json
while True:
    content = raw_input("请输入需要翻译的内容：")  # 系统捕获输入，就是命令框会弹出提示，需要你进行手动输入
    if content == 'q':  # 输入q退出while循环
        break

    url = "http://fanyi.youdao.com/translate?smartresult=dict&smartresult=rule&smartresult=ugc&sessionFrom=null"
    data = {}  # 构造data，里面构造参数传入
    data['type'] = 'AUTO'
    data['i']=content
    data['doctype'] = 'json' 
    data['xmlVersion'] = '1.8'
    data['keyfrom'] = 'fanyi.web'
    data['ue'] = 'UTF-8'
    data['action'] = 'FY_BY_ENTER'
    data['typoResult'] = 'true'

    data = urllib.urlencode(data).encode('utf-8')  # 将构造的data编码
    req = urllib2.Request(url)  # 向浏览器发出请求
    response = urllib2.urlopen(req, data)   # 带参请求，返回执行结果
    html = response.read().decode('utf-8')
    # print(html)  # 可以取消print的注释，查看其中效果，这边获取的结果是进行解析

    target = json.loads(html)   # 以json形式载入获取到的html字符串

    print "翻译的内容是："+target['translateResult'][0][0]['tgt'].encode('utf-8')


# 请输入需要翻译的内容：test
# 翻译的内容是：测试
# 请输入需要翻译的内容：测试
# 翻译的内容是：test
# 请输入需要翻译的内容：q
