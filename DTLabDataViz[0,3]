#DT Lab Python Data Viz Wechat Group
#DT君 Python学习小组
#Joined 2017-06-28
# 00 - Fibonaci
# 01 - Nolli Plot
# 02 - Wechat API - Friends' signature
# 03 - Web Crawler: PhantomJS + selenium

#### Week 1 Nolli Plot ####
> Nolli Plot Instruction
https://mp.weixin.qq.com/s/SVAlcgeDLuAXGB_EtxL10Q

> Setting up Python Environment (Optional)
https://mp.weixin.qq.com/s/t9oQTVkBH0zTSEksPvl8NQ

> Package management system: 

pip 
https://pip.pypa.io/en/stable/installing/#upgrading-pip

Conda/Miniconda 
https://conda.io/docs/

"Package, dependency and environment management for any language: Python, R, Ruby, Lua, Scala, Java, Javascript, C/ C++, FORTRAN
Conda is an open source package management system and environment management system for installing multiple versions of 
software packages and their dependencies and switching easily between them. It works on Linux, OS X and Windows, 
and was created for Python programs but can package and distribute any software.

Miniconda is a small “bootstrap” version that includes only conda, Python, and the packages they depend on. 
Over 720 scientific packages and their dependencies can be installed individually from the Continuum repository 
with the “conda install” command."

> Setting up Environmental Variables (for win10)
# Debug since Terminal prompt " 'conda' is not recognized as an internal or external command... "
PATH variable: Control Panel\System and Security\System\Advanced System Settings > [Environmental Variables...] > System Variables > path

> install osmnx with conda
while in terminal:
conda install -c conda-forge osmnx

> install packages in pip
https://packaging.python.org/tutorials/installing-packages/#use-pip-for-installing

> Code for Nolli Plot
python 3.6
#### Code ####
import osmnx as ox
from Ipython.display import Image
ox.config(log_file = True, log_console = True, use_cache = True)

# config the inline image display
img_folder = 'images'
extension = 'png'
size = 350

place = 'Emory'
point = (33.785, -84.324)
fig, ax = ox.plot_figure_ground(point = point, filename = place, network_type = 'all', dpi = 150)
Image('{}/{}.{}'.format(image_folder, place, extension), height=size, width = size)
#### End of Code ####


#### Week 2  ####
> Wechat Friend Signature to word cloud Instruction
https://mp.weixin.qq.com/s/0Bw8QUo1YfWZR_Boeaxu_Q

> $PYTHONPATH
(http://www.bdnyc.org/2012/09/editing-pythonpath-to-import-modules/)
Path searching behavior:
Python looks for modules in three places when it starts up:
1.) The directory that python or ipython was launched from
2.) A default location relative to where the actual python executable is- for instance, my active python is /.../Versions/7.3/bin/python so all the python modules are stored in directories below ../lib/python2.7/
3.) $PYTHONPATH, if it exists. 

Edit PYTHONPATH
#code
import sys
sys.path.append("path/to/Modules")
print sys.path
#end of code

> switch lines in terminal
<space><backslash><enter>


#### Code ####
python 2.7
# -*- coding: utf-8  -*-

import sys
sys.path.append("g:\IDE\Conda\Lib\site-packages")
print (sys.path)

import itchat
import re
import jieba
import matplotlib.pyplot as plt
import numpy as np
from pandas import DataFrame
from wordcloud import WordCloud, ImageColorGenerator
import PIL.Image as Image 


#login wechat account
itchat.login()
#get info and create a json file
friends = itchat.get_friends(update=True)[0:]

#init var's values
male = female = other = 0
#start w/ friends[1], since friend[0] is self
for i in friends[1:]:
    sex = i["Sex"]
    if sex == 1:
        male += 1
    elif sex == 2:
        female += 1
    else:
        other +=1

# count of all friends
total = len(friends[1:])
# print
print("Male: %.2f%%" % (float(male)/total*100) + "\n" + "Female: %.2f%%" % (float(female) / total * 100) + "\n" + "Other  %.2f%%" % (float(other) / total * 100))

#helper method: fetch values for variable [var]
def get_var(var):
    variable = []
    for i in friends:
        value = i[var]
        variable.append(value)
    return variable

# get info and save as csv
NickName = get_var("NickName")
Sex = get_var('Sex')
Province = get_var('Province')
City = get_var('City')
Signature = get_var('Signature')

data = {'NickName': NickName, 'Sex': Sex, 'Province': Province, 'City': City, 'Signature': Signature}
frame = DataFrame(data)
frame.to_csv('data_WechatFriendInfo.csv', index=True)

#Create list for signatures
siglist = []
for i in friends:
    signature = i["Signature"].strip().replace("span","").replace("class","").replace("emoji","")
    rep = re.compile("1f\d+\w*|[<>/=]")
    signature = rep.sub("", signature)
    siglist.append(signature)
text = "".join(siglist)

#create word list after splitting
wordlist = jieba.cut(text, cut_all=True)
word_space_split = " ".join(wordlist)

#ploting
coloring = np.array(Image.open("G:/IDE/workspace/DTLabDataViz/images/wechat.jpg"))
my_wordcloud = WordCloud(background_color="white", max_words=2000,
                         mask=coloring, max_font_size=60, random_state=42, scale=2,
                         font_path="C:/Windows/Fonts/STXINGKA.TTF").generate(word_space_split)

image_colors = ImageColorGenerator(coloring)
plt.imshow(my_wordcloud.recolor(color_func=image_colors))
plt.imshow(my_wordcloud)
plt.axis("off")
plt.show()
#### End of Code ####


#### Week 3 NetEase Playlist Crawl ####
Instruction
http://blog.csdn.net/mrlevo520/article/details/74908066

Python 2.7 
selenium 3.4.3 - pip install selenium
phantomjs v2.1 - download from official site

Selenium crawler Example
http://blog.csdn.net/eastmount/article/details/47825633

# -*- coding: utf-8  -*-

import traceback
from selenium import webdriver
import selenium.webdriver.support.ui as ui
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import time
import random
#NetEase ID: 437045500

#### Code for NetEaseCloudMusic.py ####

#Helper method: writeCSV(data, path)
def writeCSV(data, path):
    f = open(path, "a")
    f.write(data)
    f.write("\n")
    f.close()
    
# 获取该id喜欢音乐的列表
def catchSongs(url_id,url):

    user = url_id.split('=')[-1].strip()  
    print ('excute user:',user)

    driver = webdriver.PhantomJS(executable_path='G:/IDE/Conda/phantomJS.exe')  # 注意填上路径
    driver.get(url)

    driver.switch_to_frame('g_iframe')  # 网易云的音乐元素都放在框架内！！！！先切换框架

    try:
        wait = ui.WebDriverWait(driver,15)
        wait.until(lambda driver: driver.find_element_by_xpath('//*[@class="j-flag"]/table/tbody'))  # 等待元素渲染出来
        try:
            song_key = 1
            wrong_time = 0
            while wrong_time < 5:  # 不断获取歌信息，假定5次获取不到值，就判无值可获取，跳出循环
                try:
                    songs = driver.find_elements_by_xpath('//*[@class="j-flag"]/table/tbody/tr[%s]'%song_key)
                    info_ = songs[0].text.strip().split("\n")
                    if len(info_) == 5:
                        info_.insert(2,'None') # 没有MV选项的进行插入None
                    new_line = '%s|'%user+'|'.join(info_)
                    song_key +=1
                    new_line = "%s|%s|%s|%s|%s|%s|%s"%(user,info_[0],info_[1],info_[2],info_[3],info_[4],info_[5])

                    print (new_line)

                    writeCSV(new_line,user)  
                    #write2txt(new_line.encode('utf-8'),user)  # mac写入文件需要改变字符，以id命名的文件，存储在执行脚本的当前路径下


                except Exception as ex:
                    wrong_time +=1
                    # print ex
        except Exception as ex:
            pass

    except Exception as ex:
        traceback.print_exc()
    finally:
        driver.quit()


# 获取id所喜爱的音乐的url
def catchPlaylist(url):

    driver = webdriver.PhantomJS(executable_path='G:/IDE/Conda/phantomJS.exe')  # 注意填上路径
    driver.get(url)

    driver.switch_to_frame('g_iframe')  # 网易云的音乐元素都放在框架内！！！！先切换框架

    try:
        wait = ui.WebDriverWait(driver,15)
        wait.until(lambda driver: driver.find_element_by_xpath('//*[@class="m-cvrlst f-cb"]/li[1]/div/a'))  # 根据xpath获取元素

        urls = driver.find_elements_by_xpath('//*[@class="m-cvrlst f-cb"]/li[1]/div/a')
        favourite_url = urls[0].get_attribute("href")

    except Exception as ex:
        traceback.print_exc()
    finally:
        driver.quit()
    # print favourite_url
    return favourite_url


if __name__ == '__main__':
    for url in ['http://music.163.com/user/home?id=437045500']:  # 这里把自己的id替换掉，想爬谁的歌单都可以，只要你有他的id
        time.sleep(random.randint(2, 4)) # 随机休眠时间2~4秒
        url_playlist = catchPlaylist(url)
        time.sleep(random.randint(1, 2))
        catchSongs(url,url_playlist)
#### End of Code ####
        

#### Code: NetEaseCloudMusicDataViz.py ####

# -*- coding: utf-8 -*-

import numpy as np
import PIL.Image as Image
from wordcloud import WordCloud, ImageColorGenerator
import matplotlib.pyplot as plt

# 统计词频
def statistics(lst):  
    dic = {}  
    for k in lst:  
        if not k in dic:dic[k] = 0  
        dic[k] +=1  
    return dic  


path = '437045500'  # 自己路径自己搞定
list_ = []
with open(path,'r') as f:
    for line in f:
        list_.append(line.strip().split('|')[-2].strip())

dict_ = statistics(list_)


# the font from github: https://github.com/adobe-fonts
font = "C:/Windows/Fonts/STXINGKA.TTF"
#coloring = np.array(Image.open("/images/wechat.jpg"))
coloring = np.array(Image.open("G:/IDE/workspace/DTLabDataViz/images/wechat.jpg"))  # 遮罩层自己定义，可选自己的图片

wc = WordCloud(background_color="white",
               collocations=False, 
               font_path=font,
               width=1400, 
               height=1400,
               margin=2,
               mask=np.array(Image.open("G:/IDE/workspace/DTLabDataViz/images/wechat.jpg"))).generate_from_frequencies(dict_)

# 这里采用了generate_from_frequencies(dict_)的方法，里面传入的值是{‘歌手1’:5,‘歌手2’:8,},分别是歌手及出现次数，其实和jieba分词
# 之后使用generate(text)是一个效果，只是这里的text已经被jieba封装成字典了

image_colors = ImageColorGenerator(np.array(Image.open("G:/IDE/workspace/DTLabDataViz/images/wechat.jpg")))
plt.imshow(wc.recolor(color_func=image_colors))
plt.imshow(wc)
plt.axis("off")
plt.show()

wc.to_file('mymusic2.png')  # 把词云保存下来

#### End of Code ####

#### Week 5 - Login Scripts ####
163mail - http://blog.csdn.net/eastmount/article/details/47825633
captcha code robot (Tesseract) - http://blog.csdn.net/mrlevo520/article/details/51901579
CSDN - http://blog.csdn.net/MrLevo520/article/details/51932076

